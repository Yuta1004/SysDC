name: release

on:
  push:
    branches:
    - "master"
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-on-windows:
    runs-on: windows-latest

    steps:
    # Setup
    - name: Setup repository
      uses: actions/checkout@v3

    - name: Setup tool-runner
      run: make -C tool_runner setup
      working-directory: cliapp

    - name: Setup rust toolchain
      run: rustup target add x86_64-pc-windows-msvc

    # Build 
    - name: Build tool-runner
      run: make -C tool_runner build
      working-directory: cliapp

    - name: Build sysdc_cli
      run: cargo build --release --target=x86_64-pc-windows-msvc
      working-directory: cliapp
      env:
        DONT_BUILD_REACT:
        RUSTFLAGS: -C target-feature=+crt-static

    # Upload artifact
    - name: Make package
      run: powershell Compress-Archive -Path cliapp/target/x86_64-pc-windows-msvc/release/sysdc_cli.exe,LICENSE,example/ -DestinationPath SysDC_CLI-x86_64-windows.zip

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Windows
        path: ./SysDC_CLI-x86_64-windows.zip

  build-on-linux:
    runs-on: ubuntu-latest

    steps:
    # Setup
    - name: Setup repository
      uses: actions/checkout@v3

    - name: Setup tool-runner
      run: make -C tool_runner setup
      working-directory: cliapp

    - name: Setup rust toolchain
      run: rustup target add x86_64-unknown-linux-gnu
      working-directory: cliapp

    # Build
    - name: Build tool-runner
      run: make -C tool_runner build
      working-directory: cliapp

    - name: Build sysdc_cli
      run: cargo build --release --target=x86_64-unknown-linux-gnu
      working-directory: cliapp
      env:
        RUSTFLAGS: -C target-feature=+crt-static

    # Upload artifact
    - name: Make package
      run: |
        cp cliapp/target/x86_64-unknown-linux-gnu/release/sysdc_cli .
        zip -r SysDC_CLI-x86_64-unknown-linux-gnu sysdc_cli LICENSE example/

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Linux
        path: ./SysDC_CLI-x86_64-unknown-linux-gnu.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [build-on-windows, build-on-linux]

    # Create empty release
    steps:
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: tmp
        release_name: tmp
        draft: true

    # Download artifacts
    - name: Download artifacts
      id: download_artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./

    # Upload to GitHub Release
    - name: Upload (Windows)
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Windows/SysDC_CLI-x86_64-windows.zip
        asset_name: SysDC_CLI-x86_64-windows.zip
        asset_content_type: application/zip

    - name: Upload (Linux)
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Linux/SysDC_CLI-x86_64-unknown-linux-gnu.zip
        asset_name: SysDC_CLI-x86_64-unknown-linux-gnu.zip
        asset_content_type: application/zip
